package LearningPathLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Learner;
  private ConceptPresentation props_LearningMaterial;
  private ConceptPresentation props_Lesson;
  private ConceptPresentation props_MaterialType;
  private ConceptPresentation props_Practical;
  private ConceptPresentation props_ProgressAssessment;
  private ConceptPresentation props_Question;
  private ConceptPresentation props_SubTopic;
  private ConceptPresentation props_Theoretical;
  private ConceptPresentation props_Topic;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Learner:
        if (props_Learner == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Learner = cpb.create();
        }
        return props_Learner;
      case LanguageConceptSwitch.LearningMaterial:
        if (props_LearningMaterial == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LearningMaterial = cpb.create();
        }
        return props_LearningMaterial;
      case LanguageConceptSwitch.Lesson:
        if (props_Lesson == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Lesson = cpb.create();
        }
        return props_Lesson;
      case LanguageConceptSwitch.MaterialType:
        if (props_MaterialType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MaterialType = cpb.create();
        }
        return props_MaterialType;
      case LanguageConceptSwitch.Practical:
        if (props_Practical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Practical = cpb.create();
        }
        return props_Practical;
      case LanguageConceptSwitch.ProgressAssessment:
        if (props_ProgressAssessment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ProgressAssessment = cpb.create();
        }
        return props_ProgressAssessment;
      case LanguageConceptSwitch.Question:
        if (props_Question == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Question = cpb.create();
        }
        return props_Question;
      case LanguageConceptSwitch.SubTopic:
        if (props_SubTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SubTopic = cpb.create();
        }
        return props_SubTopic;
      case LanguageConceptSwitch.Theoretical:
        if (props_Theoretical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Theoretical = cpb.create();
        }
        return props_Theoretical;
      case LanguageConceptSwitch.Topic:
        if (props_Topic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Topic = cpb.create();
        }
        return props_Topic;
    }
    return null;
  }
}
